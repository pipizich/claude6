// static/js/script.js

document.addEventListener('DOMContentLoaded', () => {
  
  // ==== Utility Functions ====
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // ==== Enhanced Toast Notification System ====
  class ToastManager {
    constructor() {
      this.container = this.createContainer();
      this.toastCounter = 0;
    }

    createContainer() {
      let container = document.querySelector('.toast-container');
      if (!container) {
        container = document.createElement('div');
        container.className = 'toast-container';
        document.body.appendChild(container);
      }
      return container;
    }

    show(message, type = 'info', duration = 5000) {
      const toast = document.createElement('div');
      toast.className = `toast ${type}`;
      toast.setAttribute('data-toast-id', ++this.toastCounter);
      
      const icons = {
        success: '✓',
        error: '✗',
        warning: '⚠',
        info: 'ⓘ'
      };
      
      toast.innerHTML = `
        <span class="toast-icon">${icons[type] || icons.info}</span>
        <span class="toast-message">${message}</span>
      `;
      
      this.container.appendChild(toast);
      
      requestAnimationFrame(() => {
        toast.classList.add('show');
      });
      
      const autoRemove = setTimeout(() => {
        this.removeToast(toast);
      }, duration);
      
      toast.addEventListener('click', () => {
        clearTimeout(autoRemove);
        this.removeToast(toast);
      });
      
      return toast;
    }

    removeToast(toast) {
      toast.classList.remove('show');
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 400);
    }

    success(message, duration = 4000) {
      return this.show(message, 'success', duration);
    }

    error(message, duration = 7000) {
      return this.show(message, 'error', duration);
    }

    warning(message, duration = 6000) {
      return this.show(message, 'warning', duration);
    }

    info(message, duration = 4000) {
      return this.show(message, 'info', duration);
    }

    clear() {
      const toasts = this.container.querySelectorAll('.toast');
      toasts.forEach(toast => this.removeToast(toast));
    }
  }

  // ==== Lazy Image Loader ====
  class LazyImageLoader {
    constructor() {
      this.imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            img.src = img.dataset.src;
            img.classList.remove('lazy');
            img.classList.add('lazy-loaded');
            observer.unobserve(img);
          }
        });
      });
    }

    observe(images) {
      images.forEach(img => {
        if (img.dataset.src) {
          this.imageObserver.observe(img);
        } else {
          // Fallback for images without data-src
          img.classList.add('lazy-loaded');
        }
      });
    }
  }

  // ==== Network Monitor ====
  class NetworkMonitor {
    constructor() {
      this.online = navigator.onLine;
      window.addEventListener('online', () => this.handleOnline());
      window.addEventListener('offline', () => this.handleOffline());
    }
    
    handleOnline() {
      this.online = true;
      if (window.toast) {
        window.toast.success('Connection restored');
      }
    }
    
    handleOffline() {
      this.online = false;
      if (window.toast) {
        window.toast.warning('No internet connection');
      }
    }
    
    isOnline() {
      return this.online;
    }
  }

  // ==== Memory Manager ====
  class MemoryManager {
    static cleanupArtwork(artworkElement) {
      // Revoke object URLs
      const img = artworkElement.querySelector('img');
      if (img && img.src.startsWith('blob:')) {
        URL.revokeObjectURL(img.src);
      }
      
      // Remove event listeners by cloning
      const buttons = artworkElement.querySelectorAll('button');
      buttons.forEach(btn => {
        const clone = btn.cloneNode(true);
        btn.parentNode.replaceChild(clone, btn);
      });
    }
  }

  // ==== ANIMATION MANAGER ====
  class AnimationManager {
    
    // Initialize page load animations
    static initPageAnimations() {
      const artworks = document.querySelectorAll('.artwork');
      
      // Add entering class to all artworks initially
      artworks.forEach((artwork, index) => {
        artwork.classList.add('artwork-entering');
        
        // Add staggered delay classes
        if (index < 6) {
          artwork.classList.add(`delay-${index + 1}`);
        }
      });
      
      // Trigger animations after a brief delay
      setTimeout(() => {
        artworks.forEach(artwork => {
          artwork.classList.remove('artwork-entering');
          artwork.classList.add('artwork-visible');
          
          // Clean up will-change after animation
          setTimeout(() => {
            artwork.classList.add('animation-done');
          }, 1000);
        });
      }, 100);
    }
    
    // Animate new artwork addition
    static animateNewArtwork(artworkElement) {
      artworkElement.classList.add('artwork-new');
      
      // Remove animation classes after animation completes
      setTimeout(() => {
        artworkElement.classList.remove('artwork-new');
        artworkElement.classList.add('artwork-pulse');
        
        // Remove pulse after it completes
        setTimeout(() => {
          artworkElement.classList.remove('artwork-pulse');
          artworkElement.classList.add('animation-done');
        }, 2000);
      }, 1200);
    }
    
    // Enhanced removal animation
    static animateRemoveArtwork(artworkElement) {
      return new Promise((resolve) => {
        artworkElement.classList.add('artwork-removing');
        
        // Wait for animation to complete
        setTimeout(() => {
          resolve();
        }, 800);
      });
    }
    
    // Animate modal opening
    static animateModalOpen(modal) {
      modal.classList.add('modal-entering');
      modal.style.display = 'block';
      
      requestAnimationFrame(() => {
        modal.classList.remove('modal-entering');
        modal.classList.add('modal-visible');
      });
    }
    
    // Animate modal closing
    static animateModalClose(modal) {
      return new Promise((resolve) => {
        modal.classList.remove('modal-visible');
        modal.classList.add('modal-entering');
        
        setTimeout(() => {
          modal.style.display = 'none';
          modal.classList.remove('modal-entering');
          resolve();
        }, 300);
      });
    }
    
    // Create loading skeleton
    static createLoadingSkeleton() {
      const skeleton = document.createElement('div');
      skeleton.className = 'artwork artwork-skeleton';
      skeleton.innerHTML = `
        <div class="artwork-container">
          <div class="skeleton-img"></div>
        </div>
        <div class="artwork-info">
          <div class="skeleton-title"></div>
          <div class="skeleton-desc"></div>
        </div>
      `;
      return skeleton;
    }
  }

  // ==== Loading State Manager ====
  class LoadingManager {
    static setButtonLoading(button, loading = true) {
      if (loading) {
        button.disabled = true;
        button.classList.add('loading');
        button.setAttribute('data-original-text', button.textContent);
        button.setAttribute('data-original-html', button.innerHTML);
      } else {
        button.disabled = false;
        button.classList.remove('loading');
        const originalText = button.getAttribute('data-original-text');
        const originalHtml = button.getAttribute('data-original-html');
        if (originalHtml) {
          button.innerHTML = originalHtml;
        } else if (originalText) {
          button.textContent = originalText;
        }
      }
    }

    static showGlobalLoading(message = 'Loading...') {
      let loader = document.querySelector('.global-loader');
      if (!loader) {
        loader = document.createElement('div');
        loader.className = 'global-loader';
        loader.innerHTML = `
          <div class="loading-spinner"></div>
          <div class="loading-message">${message}</div>
        `;
        document.body.appendChild(loader);
      }
      loader.style.display = 'block';
      return loader;
    }

    static hideGlobalLoading() {
      const loader = document.querySelector('.global-loader');
      if (loader) {
        loader.style.display = 'none';
      }
    }
  }

  // Initialize managers
  const toast = new ToastManager();
  window.toast = toast;
  const networkMonitor = new NetworkMonitor();
  const lazyLoader = new LazyImageLoader();

  // Initialize lazy loading
  const lazyImages = document.querySelectorAll('img.lazy');
  lazyLoader.observe(lazyImages);

  // ==== Enhanced Fetch ====
  async function enhancedFetch(url, options = {}) {
    if (!networkMonitor.isOnline()) {
      throw new Error('No internet connection');
    }

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000);

    try {
      const response = await fetch(url, {
        ...options,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const data = await response.json();
        if (!response.ok) {
          throw new Error(data.message || `HTTP ${response.status}: ${response.statusText}`);
        }
        return data;
      } else {
        throw new Error('Server returned non-JSON response');
      }
    } catch (error) {
      clearTimeout(timeoutId);
      if (error.name === 'AbortError') {
        throw new Error('Request timeout. Please try again.');
      }
      throw error;
    }
  }

  // ==== File Validation ====
  function validateImageFile(file) {
    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'];
    const maxSize = 15 * 1024 * 1024; // 15MB
    
    if (!validTypes.includes(file.type)) {
      toast.error('Invalid file type. Please select: JPG, PNG, GIF, WebP, or SVG');
      return false;
    }
    
    if (file.size > maxSize) {
      toast.error(`File too large (${(file.size / 1024 / 1024).toFixed(1)}MB). Max size: 15MB`);
      return false;
    }
    
    return true;
  }

  // ==== File Handling Functions ====
  function handleFile(file, container) {
    if (!validateImageFile(file)) return;
    
    container.innerHTML = '';
    const wrapper = document.createElement('div');
    wrapper.classList.add('preview-wrapper');

    const img = document.createElement('img');
    img.src = URL.createObjectURL(file);
    img.alt = file.name;
    img.onload = () => {
      URL.revokeObjectURL(img.src);
      toast.success(`Image loaded: ${file.name} (${(file.size / 1024).toFixed(1)}KB)`);
    };

    const btn = document.createElement('button');
    btn.type = 'button';
    btn.textContent = '×';
    btn.title = 'Remove image';
    btn.addEventListener('click', () => {
      wrapper.remove();
      toast.info('Image preview removed');
    });

    wrapper.appendChild(img);
    wrapper.appendChild(btn);
    container.appendChild(wrapper);
  }

  function handleEditFile(file, container) {
    if (!validateImageFile(file)) return;
    
    container.innerHTML = '';
    const wrapper = document.createElement('div');
    wrapper.classList.add('preview-wrapper');

    const img = document.createElement('img');
    img.src = URL.createObjectURL(file);
    img.alt = file.name;
    img.onload = () => {
      URL.revokeObjectURL(img.src);
      toast.success(`New image loaded: ${file.name} (${(file.size / 1024).toFixed(1)}KB)`);
    };

    const btn = document.createElement('button');
    btn.type = 'button';
    btn.textContent = '×';
    btn.title = 'Remove image';
    btn.addEventListener('click', () => {
      wrapper.remove();
      toast.info('Image preview removed');
    });

    wrapper.appendChild(img);
    wrapper.appendChild(btn);
    container.appendChild(wrapper);
  }
  // ==== Modals ====
  const addArtworkModal = document.getElementById('add-artwork-modal');
  const editArtworkModal = document.getElementById('edit-artwork-modal');
  const viewDescriptionModal = document.getElementById('view-description-modal');
  const deleteConfirmModal = document.getElementById('delete-confirm-modal');

  // Image counter with animation
  const counterSpan = document.getElementById('image-total');
  const updateImageCounter = debounce(() => {
    const totalImages = document.querySelectorAll('.gallery .artwork:not(.artwork-skeleton)').length;
    if (counterSpan) {
      counterSpan.style.transform = 'scale(1.2)';
      counterSpan.textContent = totalImages;
      
      setTimeout(() => {
        counterSpan.style.transform = 'scale(1)';
      }, 200);
    }
  }, 300);

  updateImageCounter();

  // Store edit ID for submission
  let currentEditId = null;
  let artworkToDelete = null;

  // Add artwork button with animation
  document.getElementById('add-artwork-btn')?.addEventListener('click', () => {
    AnimationManager.animateModalOpen(addArtworkModal);
    toast.info('Ready to add new artwork');
  });

  // Edit buttons with animation
  document.querySelectorAll('.btn-edit').forEach(btn => {
    btn.addEventListener('click', () => {
      currentEditId = btn.dataset.id;
      const title = btn.dataset.title;
      const desc = btn.dataset.description;
      
      document.getElementById('edit-title').value = title || '';
      document.getElementById('edit-description').value = desc;
      AnimationManager.animateModalOpen(editArtworkModal);
      
      toast.info(`Editing artwork: "${title || 'Untitled'}"`);
    });
  });

  // Delete functionality with enhanced animation
  document.querySelectorAll('.btn-delete').forEach(btn => {
    btn.addEventListener('click', () => {
      artworkToDelete = btn.dataset.id;
      const title = btn.dataset.title || 'this artwork';
      AnimationManager.animateModalOpen(deleteConfirmModal);
      toast.warning(`Confirm deletion of "${title}"`);
    });
  });

  document.getElementById('confirm-delete')?.addEventListener('click', async () => {
    if (!artworkToDelete) return;
    
    const deleteBtn = document.getElementById('confirm-delete');
    LoadingManager.setButtonLoading(deleteBtn, true);
    
    try {
      const result = await enhancedFetch(`/delete/${artworkToDelete}`, { 
        method: 'POST'
      });
      
      if (result.success) {
        const artworkElement = document.querySelector(`[data-id="${artworkToDelete}"]`);
        if (artworkElement) {
          await AnimationManager.animateRemoveArtwork(artworkElement);
          MemoryManager.cleanupArtwork(artworkElement);
          artworkElement.remove();
          updateImageCounter();
        }
        
        toast.success(result.message || 'Artwork deleted successfully!');
        await AnimationManager.animateModalClose(deleteConfirmModal);
        artworkToDelete = null;
      } else {
        throw new Error(result.message || 'Unknown error occurred');
      }
      
    } catch (error) {
      console.error('Delete error:', error);
      toast.error(`Failed to delete artwork: ${error.message}`);
    } finally {
      LoadingManager.setButtonLoading(deleteBtn, false);
    }
  });

  document.getElementById('cancel-delete')?.addEventListener('click', async () => {
    await AnimationManager.animateModalClose(deleteConfirmModal);
    artworkToDelete = null;
    toast.info('Delete cancelled');
  });

  // View description
  const viewTitle = document.getElementById('view-title');
  const viewDesc = document.getElementById('view-description-text');
  
  const fetchDescription = async (id) => {
    const loader = LoadingManager.showGlobalLoading('Loading description...');
    
    try {
      const data = await enhancedFetch(`/get_description/${id}`);
      
      if (data.success) {
        viewTitle.textContent = data.title || 'Untitled';
        viewDesc.textContent = data.description || 'No description available.';
        AnimationManager.animateModalOpen(viewDescriptionModal);
        toast.info('Description loaded');
      } else {
        throw new Error(data.message || 'Failed to load description');
      }
    } catch (error) {
      console.error('Fetch description error:', error);
      toast.error(`Failed to load description: ${error.message}`);
    } finally {
      LoadingManager.hideGlobalLoading();
    }
  };

  document.querySelectorAll('.btn-see-more').forEach(b => {
    b.addEventListener('click', () => fetchDescription(b.dataset.id));
  });

  document.querySelectorAll('.artwork-title').forEach(t => {
    if (t.offsetWidth < t.scrollWidth) {
      t.style.cursor = 'pointer';
      t.title = 'Click to view full description';
      t.addEventListener('click', () => fetchDescription(t.dataset.id));
    }
  });

  // Enhanced close modals with animation
  document.querySelectorAll('.close').forEach(x => {
    x.addEventListener('click', async () => {
      const modal = x.closest('.modal');
      await AnimationManager.animateModalClose(modal);
      toast.info('Modal closed');
    });
  });

  window.addEventListener('click', async (e) => {
    if (e.target.classList.contains('modal')) {
      await AnimationManager.animateModalClose(e.target);
      toast.info('Modal closed');
    }
  });

  // ==== Drag & Drop Setup ====
  const dropZone = document.getElementById('drop-zone');
  const fileInput = document.getElementById('file-input');
  const previewContainer = document.getElementById('preview-container');

  dropZone?.addEventListener('click', () => {
    fileInput.click();
    toast.info('Select an image file');
  });
  
  fileInput?.addEventListener('change', () => {
    if (fileInput.files.length) {
      handleFile(fileInput.files[0], previewContainer);
    }
  });

  dropZone?.addEventListener('dragover', e => {
    e.preventDefault();
    dropZone.classList.add('dragover');
  });

  dropZone?.addEventListener('dragleave', () => {
    dropZone.classList.remove('dragover');
  });

  dropZone?.addEventListener('drop', e => {
    e.preventDefault();
    dropZone.classList.remove('dragover');
    const file = e.dataTransfer.files[0];
    if (!file) return;
    
    fileInput.files = e.dataTransfer.files;
    handleFile(file, previewContainer);
  });

  // Edit Artwork drag & drop
  const editDropZone = document.getElementById('edit-drop-zone');
  const editFileInput = document.getElementById('edit-file-input');
  const editPreviewContainer = document.getElementById('edit-preview-container');

  editDropZone?.addEventListener('click', () => {
    editFileInput.click();
    toast.info('Select a new image file');
  });
  
  editFileInput?.addEventListener('change', () => {
    if (editFileInput.files.length) {
      handleEditFile(editFileInput.files[0], editPreviewContainer);
    }
  });

  editDropZone?.addEventListener('dragover', e => {
    e.preventDefault();
    editDropZone.classList.add('dragover');
  });

  editDropZone?.addEventListener('dragleave', () => {
    editDropZone.classList.remove('dragover');
  });

  editDropZone?.addEventListener('drop', e => {
    e.preventDefault();
    editDropZone.classList.remove('dragover');
    const file = e.dataTransfer.files[0];
    if (!file) return;
    
    editFileInput.files = e.dataTransfer.files;
    handleEditFile(file, editPreviewContainer);
  });

  // ==== Paste Support ====
  document.addEventListener('paste', e => {
    const items = Array.from(e.clipboardData.files);
    if (!items.length) return;
    
    const file = items[0];
    if (addArtworkModal.style.display === 'block') {
      fileInput.files = e.clipboardData.files;
      handleFile(file, previewContainer);
      toast.success('Image pasted from clipboard');
    } else if (editArtworkModal.style.display === 'block') {
      editFileInput.files = e.clipboardData.files;
      handleEditFile(file, editPreviewContainer);
      toast.success('Image pasted from clipboard');
    }
  });

  // ==== ENHANCED AJAX FORM SUBMISSIONS ====
  
  // ADD FORM with animation
  document.getElementById('add-form')?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = this.querySelector('button[type="submit"]');
    LoadingManager.setButtonLoading(submitBtn, true);
    toast.info('Uploading artwork...');
    
    try {
      const formData = new FormData(this);
      const description = formData.get('description');
      const imageFile = formData.get('image');
      
      if (!description || description.trim() === '') {
        throw new Error('Description is required');
      }
      
      if (!imageFile || imageFile.size === 0) {
        throw new Error('Please select an image file');
      }
      
      // Create loading skeleton
      const gallery = document.getElementById('gallery');
      const skeleton = AnimationManager.createLoadingSkeleton();
      gallery.appendChild(skeleton);
      
      const response = await fetch('/add', {
        method: 'POST',
        body: formData
      });
      
      const result = await response.json();
      
      if (result.success) {
        toast.success(result.message);
        
        // Reset form and close modal with animation
        this.reset();
        document.getElementById('preview-container').innerHTML = '';
        await AnimationManager.animateModalClose(addArtworkModal);
        
        // Remove skeleton and reload
        skeleton.remove();
        
        setTimeout(() => {
          window.location.reload();
        }, 500);
      } else {
        skeleton.remove();
        throw new Error(result.message);
      }
      
    } catch (error) {
      // Remove skeleton on error
      const skeleton = document.querySelector('.artwork-skeleton');
      if (skeleton) skeleton.remove();
      
      console.error('Add artwork error:', error);
      toast.error(error.message || 'Failed to add artwork. Please try again.');
    } finally {
      LoadingManager.setButtonLoading(submitBtn, false);
    }
  });

  // EDIT FORM with animation
  document.getElementById('edit-form')?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (!currentEditId) {
      toast.error('No artwork selected for editing');
      return;
    }
    
    const submitBtn = this.querySelector('button[type="submit"]');
    LoadingManager.setButtonLoading(submitBtn, true);
    toast.info('Updating artwork...');
    
    try {
      const formData = new FormData(this);
      const description = formData.get('description');
      if (!description || description.trim() === '') {
        throw new Error('Description is required');
      }
      
      const response = await fetch(`/edit/${currentEditId}`, {
        method: 'POST',
        body: formData
      });
      
      const result = await response.json();
      
      if (result.success) {
        toast.success(result.message);
        
        // Close modal with animation
        await AnimationManager.animateModalClose(editArtworkModal);
        document.getElementById('edit-preview-container').innerHTML = '';
        currentEditId = null;
        
        setTimeout(() => {
          window.location.reload();
        }, 500);
      } else {
        throw new Error(result.message);
      }
      
    } catch (error) {
      console.error('Edit artwork error:', error);
      toast.error(error.message || 'Failed to update artwork. Please try again.');
    } finally {
      LoadingManager.setButtonLoading(submitBtn, false);
    }
  });

  // ==== Enhanced keyboard shortcuts ====
  document.addEventListener('keydown', async (e) => {
    if (e.key === 'Escape') {
      const openModals = document.querySelectorAll('.modal[style*="block"]');
      for (const modal of openModals) {
        await AnimationManager.animateModalClose(modal);
        toast.info('Modal closed');
      }
    }
    
    if (e.ctrlKey && e.key === 'a' && !e.target.matches('input, textarea')) {
      e.preventDefault();
      if (addArtworkModal) {
        AnimationManager.animateModalOpen(addArtworkModal);
        toast.info('Add artwork modal opened');
      }
    }
  });

  // ==== Global error handler ====
  window.addEventListener('unhandledrejection', event => {
    console.error('Unhandled promise rejection:', event.reason);
    toast.error('An unexpected error occurred. Please refresh the page.');
  });

  // ==== Initialize animations when page loads ====
  AnimationManager.initPageAnimations();

  // ==== Initialize with welcome message ====
  setTimeout(() => {
    toast.success('Gallery loaded successfully!', 3000);
  }, 1000);
});
